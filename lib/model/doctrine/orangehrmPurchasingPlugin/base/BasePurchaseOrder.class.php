<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('PurchaseOrder', 'doctrine');

/**
 * BasePurchaseOrder
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $request_master_id
 * @property integer $request_id
 * @property integer $id
 * @property integer $vendor_id
 * @property integer $product_id
 * @property float $price
 * @property integer $recipient_id
 * @property timestamp $issued_date
 * @property timestamp $deadline
 * @property integer $requester_id
 * @property integer $approved_by
 * @property string $description
 * @property integer $quantity
 * @property string $transaction_number
 * @property integer $status
 * @property string $cancellation_reason
 * @property Employee $Employee
 * @property Product $Product
 * @property Employee $Recipient
 * @property Employee $Requester
 * @property Vendor $Vendor
 * @property PurchaseRequest $PurchaseRequest
 * @property PurchaseRequestMaster $PurchaseRequestMaster
 * 
 * @method integer               getRequestMasterId()       Returns the current record's "request_master_id" value
 * @method integer               getRequestId()             Returns the current record's "request_id" value
 * @method integer               getId()                    Returns the current record's "id" value
 * @method integer               getVendorId()              Returns the current record's "vendor_id" value
 * @method integer               getProductId()             Returns the current record's "product_id" value
 * @method float                 getPrice()                 Returns the current record's "price" value
 * @method integer               getRecipientId()           Returns the current record's "recipient_id" value
 * @method timestamp             getIssuedDate()            Returns the current record's "issued_date" value
 * @method timestamp             getDeadline()              Returns the current record's "deadline" value
 * @method integer               getRequesterId()           Returns the current record's "requester_id" value
 * @method integer               getApprovedBy()            Returns the current record's "approved_by" value
 * @method string                getDescription()           Returns the current record's "description" value
 * @method integer               getQuantity()              Returns the current record's "quantity" value
 * @method string                getTransactionNumber()     Returns the current record's "transaction_number" value
 * @method integer               getStatus()                Returns the current record's "status" value
 * @method string                getCancellationReason()    Returns the current record's "cancellation_reason" value
 * @method Employee              getEmployee()              Returns the current record's "Employee" value
 * @method Product               getProduct()               Returns the current record's "Product" value
 * @method Employee              getRecipient()             Returns the current record's "Recipient" value
 * @method Employee              getRequester()             Returns the current record's "Requester" value
 * @method Vendor                getVendor()                Returns the current record's "Vendor" value
 * @method PurchaseRequest       getPurchaseRequest()       Returns the current record's "PurchaseRequest" value
 * @method PurchaseRequestMaster getPurchaseRequestMaster() Returns the current record's "PurchaseRequestMaster" value
 * @method PurchaseOrder         setRequestMasterId()       Sets the current record's "request_master_id" value
 * @method PurchaseOrder         setRequestId()             Sets the current record's "request_id" value
 * @method PurchaseOrder         setId()                    Sets the current record's "id" value
 * @method PurchaseOrder         setVendorId()              Sets the current record's "vendor_id" value
 * @method PurchaseOrder         setProductId()             Sets the current record's "product_id" value
 * @method PurchaseOrder         setPrice()                 Sets the current record's "price" value
 * @method PurchaseOrder         setRecipientId()           Sets the current record's "recipient_id" value
 * @method PurchaseOrder         setIssuedDate()            Sets the current record's "issued_date" value
 * @method PurchaseOrder         setDeadline()              Sets the current record's "deadline" value
 * @method PurchaseOrder         setRequesterId()           Sets the current record's "requester_id" value
 * @method PurchaseOrder         setApprovedBy()            Sets the current record's "approved_by" value
 * @method PurchaseOrder         setDescription()           Sets the current record's "description" value
 * @method PurchaseOrder         setQuantity()              Sets the current record's "quantity" value
 * @method PurchaseOrder         setTransactionNumber()     Sets the current record's "transaction_number" value
 * @method PurchaseOrder         setStatus()                Sets the current record's "status" value
 * @method PurchaseOrder         setCancellationReason()    Sets the current record's "cancellation_reason" value
 * @method PurchaseOrder         setEmployee()              Sets the current record's "Employee" value
 * @method PurchaseOrder         setProduct()               Sets the current record's "Product" value
 * @method PurchaseOrder         setRecipient()             Sets the current record's "Recipient" value
 * @method PurchaseOrder         setRequester()             Sets the current record's "Requester" value
 * @method PurchaseOrder         setVendor()                Sets the current record's "Vendor" value
 * @method PurchaseOrder         setPurchaseRequest()       Sets the current record's "PurchaseRequest" value
 * @method PurchaseOrder         setPurchaseRequestMaster() Sets the current record's "PurchaseRequestMaster" value
 * 
 * @package    orangehrm
 * @subpackage model\purchasing\base
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePurchaseOrder extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ohrm_purchase_order');
        $this->hasColumn('request_master_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('request_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('vendor_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('product_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('price', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('recipient_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('issued_date', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('deadline', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('requester_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('approved_by', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('quantity', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('transaction_number', 'string', 225, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 225,
             ));
        $this->hasColumn('status', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('cancellation_reason', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Employee', array(
             'local' => 'approved_by',
             'foreign' => 'emp_number'));

        $this->hasOne('Product', array(
             'local' => 'product_id',
             'foreign' => 'id'));

        $this->hasOne('Employee as Recipient', array(
             'local' => 'recipient_id',
             'foreign' => 'emp_number'));

        $this->hasOne('Employee as Requester', array(
             'local' => 'requester_id',
             'foreign' => 'emp_number'));

        $this->hasOne('Vendor', array(
             'local' => 'vendor_id',
             'foreign' => 'id'));

        $this->hasOne('PurchaseRequest', array(
             'local' => 'request_id',
             'foreign' => 'id'));

        $this->hasOne('PurchaseRequestMaster', array(
             'local' => 'request_master_id',
             'foreign' => 'id'));
    }
    public function getRecipientEmployee(){
        $service = new OrderInputService();
        $reqM = $service->getEmployeeList();
        foreach($reqM as $M){
            if($M->getEmpNumber() == $this->getRecipientId()){
                $emp = $M;
            }
        }
        return $emp->getFirstName()." ".$emp->getLastName();
    }
        
    public function getRequesterEmployee(){
        $service = new OrderInputService();
        $reqM = $service->getEmployeeList();
        foreach($reqM as $M){
            if($M->getEmpNumber() == $this->getRequesterId()){
                $emp = $M;
            }
        }
        return $emp->getFirstName()." ".$emp->getLastName();
    }       
    public function getCurrentStatus(){
        $stat = $this->getStatus();
        if($stat == 0){
            return "Pending";
        }else if($stat == 1){
            return "Completed";
        }else if($stat == 2){
            return "Canceled";
        }
    }
}